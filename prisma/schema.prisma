// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  MANAGER
  MEMBER
}

model User {
  id                String     @id @default(uuid())
  name              String
  email             String     @unique
  imageUrl          String
  imageId           String
  role              Role       @default(MEMBER)
  password_hash     String
  created_at        DateTime   @default(now())
  teamId            String?
  team              Team?      @relation(fields: [teamId], references: [id])
  managedTeam       Team?      @relation("Manager")
  admission_date    DateTime?
  phone             String?
  enrollment        String?
  education         String?
  bio               String?
  certifications    String?
  goals             Goal[]
  feedbacksGiven    Feedback[] @relation("FeedbackGiven")
  feedbacksReceived Feedback[] @relation("FeedbackReceived")

  @@map("users")
}

model Feedback {
  id             String @id @default(uuid())
  technicalSkill Int
  resilience     Int
  sociability    Int
  description    String
  userId         String
  user           User   @relation("FeedbackReceived", fields: [userId], references: [id], onDelete: Cascade)

  givenByUserId String
  givenByUser   User   @relation("FeedbackGiven", fields: [givenByUserId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  @@map("feedbacks")
}

model Team {
  id        String @id @default(uuid())
  name      String
  managerId String @unique
  manager   User   @relation("Manager", fields: [managerId], references: [id])

  Users User[]

  @@map("teams")
}

model Goal {
  id          String   @id @default(uuid())
  title       String
  startDate   DateTime
  endDate     DateTime
  description String
  isCompleted Boolean  @default(false)
  userId      String
  user        User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@map("goals")
}
